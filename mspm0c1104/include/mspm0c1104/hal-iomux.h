// SPDX-License-Identifier: MIT
//
// Copyright 2025 dgz
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the “Software”), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <stdbool.h>
#include "hal-util.h"

#define HAL_IOMUX ((struct hal_iomux_regs *const)(0x40428000))

// clang-format off

#define HAL_IOMUX_PINCM_BIT_INV		(HAL_BIT_26)
#define HAL_IOMUX_PINCM_BIT_HIZ1	(HAL_BIT_25)
#define HAL_IOMUX_PINCM_BIT_HYSTEN	(HAL_BIT_19)
#define HAL_IOMUX_PINCM_BIT_PIPU	(HAL_BIT_17)
#define HAL_IOMUX_PINCM_BIT_PIPD	(HAL_BIT_16)
#define HAL_IOMUX_PINCM_BIT_INENA	(HAL_BIT_18)
#define HAL_IOMUX_PINCM_BIT_PC		(HAL_BIT_7)

#define HAL_IOMUX_PINCM_MASK_PF \
	(HAL_BIT_5 | HAL_BIT_4 | HAL_BIT_3 | HAL_BIT_2 | HAL_BIT_1 | HAL_BIT_0)

#define HAL_IOMUX_PIN_DIGITAL_FUNC_GPIO (HAL_BIT_1)

#define HAL_IOMUX_PIN_PA0_DIGITAL_FUNC_BEEP (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA0_DIGITAL_FUNC_I2C0_SDA (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA0_DIGITAL_FUNC_TIMG8_C0 (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA0_DIGITAL_FUNC_SPI0_CS1 (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA0_DIGITAL_FUNC_FCC_IN (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA0_DIGITAL_FUNC_TIMA_FAL1 (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA1_DIGITAL_FUNC_I2C0_SCL (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA1_DIGITAL_FUNC_TIM8_C0 (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA1_DIGITAL_FUNC_HFCLK_IN (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA1_DIGITAL_FUNC_TIMA0_C1 (HAL_BIT_5)

#define HAL_IOMUX_PIN_PA2_DIGITAL_FUNC_TIMG8_C1 (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA2_DIGITAL_FUNC_SPI0_CS0 (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA2_DIGITAL_FUNC_TIMA0_C0 (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA2_DIGITAL_FUNC_TIMG8_IDX (HAL_BIT_5)

#define HAL_IOMUX_PIN_PA4_DIGITAL_FUNC_TIMA0_C0N (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA4_DIGITAL_FUNC_SPI0_POCI (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA4_DIGITAL_FUNC_LFCLK_IN (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA4_DIGITAL_FUNC_HFCLK_IN (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA4_DIGITAL_FUNC_TIMA0_C1N (HAL_BIT_6)

#define HAL_IOMUX_PIN_PA6_DIGITAL_FUNC_TIMG14__C1 (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA6_DIGITAL_FUNC_SPI0_SCK (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA6_DIGITAL_FUNC_TIMA0_C1 (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA6_DIGITAL_FUNC_TIMG14_C2 (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA6_DIGITAL_FUNC_SPI0_CS0 (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA6_DIGITAL_FUNC_TIMA_FAL0 (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA11_DIGITAL_FUNC_SPI0_SCK (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA11_DIGITAL_FUNC_I2C0_SCL (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA11_DIGITAL_FUNC_TIMA_FAL0 (HAL_BIT_4)

#define HAL_IOMUX_PIN_PA16_DIGITAL_FUNC_TIMA0_C1N (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA16_DIGITAL_FUNC_SPI0_POCI (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA16_DIGITAL_FUNC_TIMG14_C0 (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA16_DIGITAL_FUNC_FCC_IN (HAL_BIT_5)

#define HAL_IOMUX_PIN_PA17_DIGITAL_FUNC_UART0_TX (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA17_DIGITAL_FUNC_TIMA0_C0N (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA17_DIGITAL_FUNC_SPI0_SCK (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA17_DIGITAL_FUNC_TIMA0_C2 (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA17_DIGITAL_FUNC_SPI0_CS1 (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA17_DIGITAL_FUNC_TIMA0_C3 (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA18_DIGITAL_FUNC_UART0_RX (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA18_DIGITAL_FUNC_SPI0_PICO (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA18_DIGITAL_FUNC_TIMA0_C1N (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA18_DIGITAL_FUNC_CLK_OUT (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA18_DIGITAL_FUNC_TIMA0_C3 (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA18_DIGITAL_FUNC_TIMA0_C3N (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA19_DIGITAL_FUNC_SWDIO (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA19_DIGITAL_FUNC_SPI0_SCK (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA19_DIGITAL_FUNC_SPI0_POCI (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA19_DIGITAL_FUNC_TIMA0_C2 (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA19_DIGITAL_FUNC_TIMG14_C0 (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA19_DIGITAL_FUNC_UART0_CTS (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA20_DIGITAL_FUNC_SWCLK (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA20_DIGITAL_FUNC_TIMA_FAL1 (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA20_DIGITAL_FUNC_SPI0_PICO (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA20_DIGITAL_FUNC_TIMA0_C2N (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA20_DIGITAL_FUNC_TIMA0_C0 (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA20_DIGITAL_FUNC_UART0_RTS (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA22_DIGITAL_FUNC_UART0_RX (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA22_DIGITAL_FUNC_SPI0_POCI (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA22_DIGITAL_FUNC_UART0_RTS (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA22_DIGITAL_FUNC_CLK_OUT (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA22_DIGITAL_FUNC_TIMA0_C1 (HAL_BIT_6)

#define HAL_IOMUX_PIN_PA23_DIGITAL_FUNC_UART0_TX (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA23_DIGITAL_FUNC_SPI0_CS3 (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA23_DIGITAL_FUNC_TIMG14_C0 (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA23_DIGITAL_FUNC_UART0_CTS (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA23_DIGITAL_FUNC_TIMA0_C3 (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA23_DIGITAL_FUNC_TIMG14_C1 (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA24_DIGITAL_FUNC_SPI0_CS2 (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA24_DIGITAL_FUNC_TIMG14_C1 (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA24_DIGITAL_FUNC_UART0_RTS (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA24_DIGITAL_FUNC_TIMG14_C2 (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA24_DIGITAL_FUNC_TIMA0_C3N (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA24_DIGITAL_FUNC_UART0_RX (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA25_DIGITAL_FUNC_TIMG14_C3 (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA25_DIGITAL_FUNC_UART0_TX (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA25_DIGITAL_FUNC_SPI0_PICO (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA25_DIGITAL_FUNC_TIMG14_C1 (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA25_DIGITAL_FUNC_TIMA_FAL2 (HAL_BIT_6)

#define HAL_IOMUX_PIN_PA26_DIGITAL_FUNC_TIMG8_C0 (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA26_DIGITAL_FUNC_UART0_RX (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA26_DIGITAL_FUNC_SPI0_POCI (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA26_DIGITAL_FUNC_BEEP (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA26_DIGITAL_FUNC_TIMG14_C0 (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA26_DIGITAL_FUNC_TIMA_FAL0 (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA27_DIGITAL_FUNC_TIMG8_C1 (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA27_DIGITAL_FUNC_SPI0_CS3 (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA27_DIGITAL_FUNC_TIMA0_C0N (HAL_BIT_4)
#define HAL_IOMUX_PIN_PA27_DIGITAL_FUNC_UART0_TX (HAL_BIT_5)
#define HAL_IOMUX_PIN_PA27_DIGITAL_FUNC_SPI0_POCI (HAL_BIT_6)
#define HAL_IOMUX_PIN_PA27_DIGITAL_FUNC_TIMA_FAL2 (HAL_BIT_7)

#define HAL_IOMUX_PIN_PA28_DIGITAL_FUNC_TIMA0_C0 (HAL_BIT_2)
#define HAL_IOMUX_PIN_PA28_DIGITAL_FUNC_UART0_RX (HAL_BIT_3)
#define HAL_IOMUX_PIN_PA28_DIGITAL_FUNC_TIMG8_IDX (HAL_BIT_4)

// clang-format on

enum hal_iomux_pincm {
	// clang-format off

	HAL_IOMUX_PINCM_PA0	= 0,
	HAL_IOMUX_PINCM_PA1	= 1,
	HAL_IOMUX_PINCM_PA2	= 2,
	HAL_IOMUX_PINCM_PA4	= 4,
	HAL_IOMUX_PINCM_PA6	= 6,
	HAL_IOMUX_PINCM_PA11	= 11,
	HAL_IOMUX_PINCM_PA16	= 16,
	HAL_IOMUX_PINCM_PA17	= 17,
	HAL_IOMUX_PINCM_PA18	= 18,
	HAL_IOMUX_PINCM_PA19	= 19,
	HAL_IOMUX_PINCM_PA20	= 20,
	HAL_IOMUX_PINCM_PA22	= 22,
	HAL_IOMUX_PINCM_PA23	= 23,
	HAL_IOMUX_PINCM_PA24	= 24,
	HAL_IOMUX_PINCM_PA25	= 25,
	HAL_IOMUX_PINCM_PA26	= 26,
	HAL_IOMUX_PINCM_PA27	= 27,
	HAL_IOMUX_PINCM_PA28	= 28,
	HAL_IOMUX_PINCM_NUM_MAX

	// clang-format on
};

struct hal_iomux_regs {
	const u32 pad;

	volatile u32 PINCM[HAL_IOMUX_PINCM_NUM_MAX];
};

enum hal_iomux_resistor_type {
	/** No programmable resistor will be used. */
	HAL_IOMUX_RESISTOR_TYPE_NONE = 0,

	/** Programmable pull-up resistor will be used. */
	HAL_IOMUX_RESISTOR_TYPE_PULL_UP = 1,

	/** Programmable pull-down resistor will be used. */
	HAL_IOMUX_RESISTOR_TYPE_PULL_DOWN = 2
};

hal_static_assert_offset(struct hal_iomux_regs, PINCM, 0x4);

void hal_iomux_set_pin_inv(enum hal_iomux_pincm pincm, bool inv);

void hal_iomux_set_pin_hysteresis(enum hal_iomux_pincm pincm, bool hysteresis);

void hal_iomux_set_pin_resistor(enum hal_iomux_pincm pincm,
				enum hal_iomux_resistor_type resistor_type);

void hal_iomux_set_pin_func(enum hal_iomux_pincm pincm, u8 func,
			    bool input_enabled);

extern const u32 hal_iomux_valid_pincm_mask;
